
schema {
  query: Query
  mutation: Mutation
 }

type Query {
  # CollectibleToCollectibleKind
  collectibleToCollectibleKinds: [CollectibleToCollectibleKind!]!
  collectibleToCollectibleKind(id: CollectibleToCollectibleKindId!): CollectibleToCollectibleKind

  # GradingAuthority
  gradingAuthoritiesWithRelationships: GradingAuthoritiesWithRelationships!
  gradingAuthority(id: GradingAuthorityId!): GradingAuthority!

  # PricingAuthority
  pricingAuthoritiesWithRelationships: PricingAuthoritiesWithRelationships!
  pricingAuthority(id: PricingAuthorityId!): PricingAuthority!

  # SellingAuthority
  sellingAuthoritiesWithRelationships: SellingAuthoritiesWithRelationships!
  sellingAuthority(id: SellingAuthorityId!): SellingAuthority!

  # GradingScale
  gradingScalesAndRelationships: GradingScalesAndRelationships!
  gradingScaleAndRelationships(id: GradingScaleId): GradingScaleAndRelationships!

  # Image
  images(filters: ImagesFilters, startFrom: ResultPagePointer): PagedImage!
  imageAndRelationships(id: ImageId!): ImageAndRelationships!

  # RarityRatingScale
  rarityRatingScalesAndRelationships: RarityRatingScalesAndRelationships!
  rarityRatingScaleAndRelationships(id: RarityRatingScaleId!): RarityRatingScaleAndRelationships!
}


type Mutation {
  # Node
  createNode(input: CreateNodeInput!): CatalogHierarchyNode!
  updateNode(nodeId: CatalogHierarchyNodeId! input: CreateNodeInput!): CatalogHierarchyNode!
  setNodeStatus(nodeId: CatalogHierarchyNodeId! status: NodeStatus!): Void! # Check

  # Collectible
  createCollectible(input: CreateCollectibleInput!): Collectible!
  updateCollectible(collectibleId: CollectibleId!, input: CreateCollectibleInput!): Collectible!
  setCollectibleStatus(collectibleId: CollectibleId!, status: CollectibleStatusEnum!): Void!

  # CollectibleToCollectibleKind
  createCollectibleToCollectibleKind(input: CreateCollectibleToCollectibleKindInput!): CollectibleToCollectibleKind!
  updateCollectibleToCollectibleKind(id: CollectibleToCollectibleKindId!, input: CreateCollectibleToCollectibleKindInput!): CollectibleToCollectibleKind!
  setCollectibleToCollectibleKindStatus(id: CollectibleToCollectibleKindId!, status: CollectibleToCollectibleKindStatus!): Void!

  # GradingAuthority
  createGradingAuthority(input: CreateGradingAuthorityInput!): GradingAuthority!
  updateGradingAuthority(id: GradingAuthorityId!, input: CreateGradingAuthorityInput!): GradingAuthority!
  setGradingAuthorityStatus(id: GradingAuthorityId!, status: GradingAuthorityStatus!): Void!

  # PricingAuthority
  createPricingAuthority(input: CreatePricingAuthorityInput!): PricingAuthority!
  updatePricingAuthority(id: PricingAuthorityId!, input: CreatePricingAuthorityInput!): PricingAuthority!
  setPricingAuthorityStatus(id: PricingAuthorityId!, status: PricingAuthorityStatus!): Void!

  # SellingAuthority
  createSellingAuthority(input: CreateSellingAuthorityInput!): SellingAuthority!
  updateSellingAuthority(id: SellingAuthorityId!, input: CreateSellingAuthorityInput!): SellingAuthority!
  setSellingAuthorityStatus(id: SellingAuthorityId!, status: SellingAuthorityStatus!): Void!

  # Grade
  # reading handled in scale
  createGrade(input: CreateGradeInput!): CollectibleGrade!
  updateGrade(id: CollectibleGradeId!, input: CreateGradeInput!): CollectibleGrade!
  setGradeStatus(id: CollectibleGradeId!, status: GradeStatus!): Void!

  # GradingScale
  updateGradingScale(id: GradingScaleId!, input: CreateGradingScaleInput!): GradingScale!
  createGradingScale(input: CreateGradingScaleInput!): GradingScale!
  setGradingScaleStatus(id: GradingScaleId!, status: GradingScaleStatus!): Void!

  # Image
  createImage(input: CreateImageInput!): Image!
  updateImage(id: ImageId!, input: CreateImageInput!): Image!
  setImageStatus(id: ImageId!, status: ImageStatus!): Void!

  # RarityRating
  # reading handled in scale
  createRarityRating(input: CreateRarityRatingInput!): RarityRating!
  updateRarityRating(id: RarityRatingId!, input: CreateRarityRatingInput!): RarityRating!
  setRarityRatingStatus(id: RarityRatingId!, status: RarityRatingStatus!): Void!

  # RarityRatingScale
  updateRarityRatingScale(id: RarityRatingScaleId!, input: CreateRarityRatingScaleInput!): RarityRatingScale!
  createRarityRatingScale(input: CreateRarityRatingScaleInput!): RarityRatingScale!
  setRarityRatingScaleStatus(id: RarityRatingScaleId!, status: RarityRatingScaleStatus!): Void!
}


scalar AuctionId


type Auction {
  id: AuctionId!
  description: String!
  createdAt: Posix!
  collectible: CollectibleId!
  grades: [GradeKVP!]!
  sellingAuthority: SellingAuthorityId!
  images: [Image!]!
}

type AuctionPriceRealized {
  id: AuctionPriceRealizedId!
  description: String!
  createdAt: Posix!
  modifiedAt: Posix
  collectible: CollectibleId!
  amount: Int!
  images: [Image!]!
  grades: [GradeKVP!]!
  sellingAuthority: SellingAuthorityId!
  auctionUrl: String!
}

scalar AuctionPriceRealizedId

type BidForCollectible {
  id: BidForCollectibleId!
  bidBy: CompanyId!
  bidByCdnxId: DealerCdnxId!
  collectibleId: CollectibleId!
  grades: [CollectibleGradeId!]!
  gradedByAnyOf: [GradingAuthority!]!
  createdAt: Posix!
  modifiedAt: Posix
  lifetimeMillis: Int!
  bidAmount: Int!
  unitsCount: Int!
  sight: SightCode!
}

scalar BidForCollectibleId

type CatalogBranchData {
  nodes: [CatalogHierarchyNode!]!
  collectibles: [Collectible!]!
  collectiblesToNodes: [CollectibleNodeRelationship!]!
  nodesToNodes: [ChildToParentNodeRelationship!]!
  nodesToNodesKinds: [ChildToParentNodeRelationshipKind!]!
  grades: [CollectibleGrade!]!
  gradingScales: [GradingScale!]!
  sellingAuthorities: [SellingAuthority!]!
  pricingAuthorities: [PricingAuthority!]!
  gradingAuthorities: [GradingAuthority!]!
  rarityRatings: [RarityRating!]!
  gradingScalesToGradingAuthorities: [GradingScaleToGradingAuthority!]!
  gradingScalesToNodes: [GradingScaleToNode!]!
  gradingScalesToCollectibles: [GradingScaleToCollectible!]!
  nodesToSellingAuthorities: [NodeToSellingAuthority!]!
  nodesToPricingAuthorities: [NodeToPricingAuthority!]!
  nodesToGradingAuthorities: [NodeToGradingAuthority!]!
  nodesToRarityRatings: [NodeToRarityRatingScale!]!
  collectiblesToSellingAuthorities: [CollectibleToSellingAuthority!]!
  collectiblesToPricingAuthorities: [CollectibleToPricingAuthority!]!
  collectiblesToGradingAuthorities: [CollectibleToGradingAuthority!]!
  collectiblesToRarityRatings: [CollectibleToRarityRatingScale!]!
}

type CatalogHierarchyNode {
  id: CatalogHierarchyNodeId
  name: String!
  description: String!
  featuredImage: Image
  gallery: [Image!]!
  sortingPosition: Int!
  permalink: Permalink!
  status: NodeStatus!
  parentNode: CatalogHierarchyNodeId
  childNodes: [CatalogHierarchyNodeId!]!
  childCollectibles: [CollectibleId!]!
  customProperties: [CustomProperty!]!
  customPropertiesDefinitions: [CustomPropertyDefinition]
  gradingScalesClonable: Boolean!
  sellingAuthoritiesClonable: Boolean!
  pricingAuthoritiesClonable: Boolean!
  gradingAuthoritiesClonable: Boolean!
}

enum NodeStatus { WIP LIVE ARCHIVED }

scalar CatalogHierarchyNodeId

union CatalogPathResponse
=  CompleteMatch | PartialMatch | NoMatch

type CompleteMatch {
  data: CatalogBranchData
}

type PartialMatch {
  data: CatalogBranchData
}

type NoMatch {
  empty: Boolean
}

type ChildToParentNodeRelationship {
  parent: CollectibleId!
  child: CollectibleId!
  parentNote: String!
  childNote: String!
  relationshipKind: ChildToParentNodeRelationshipKindId!
  customProperties: [CustomProperty!]!
}


type ChildToParentNodeRelationshipKind {
  id: ChildToParentNodeRelationshipKindId!
  name: String!
  customPropertiesDefinitions: [CustomPropertyDefinition!]!
}

scalar ChildToParentNodeRelationshipKindId

type Collectible {
  id: CollectibleId
  name: String!
  description: String!
  featuredImage: Image
  gallery: [Image!]!
  permalink: Permalink!
  status: CollectibleStatusEnum!
  parentNodes: [CatalogHierarchyNodeId!]!
  ebayUrl: String
  customProperties: [CustomProperty!]!
}

enum CollectibleStatusEnum { WIP LIVE ARCHIVED }

type CollectibleGrade {
  id: CollectibleGradeId!
  name: String!
  weight: Int!
  gradingScale: GradingScaleId!
  status: GradeStatus!
}

enum GradeStatus { Live Archived }

scalar CollectibleGradeId

type CollectibleStatusForAllGrades {
  ungraded: CollectibleStatus
  gradedStatuses: [GradedStatuses!]!
}

type CollectibleStatus {
  population: [Population!]!
  latestBids: [BidForCollectible!]!
  bidsCount: Int
  latestOffers: [OfferForCollectible!]!
  offersCount: Int
  ongoingAuctions: [SellingAuthorityId!]!
  prices: [Prices!]!
  latestExternalAprs: [LatestExternalAprs!]!
  latestInternalTrades: [Trade!]!
  mySales: [Trade!]!
  myPurchases: [Trade!]!
}

type CollectibleStatusShort {
  prices: [Prices!]!
}

type PriceInfo {
  wholesalePrice: Int!
  retailPrice: Int
  updatedFrom: OldPriceInfo
}

type OldPriceInfo {
  wholesalePrice: Int!
  retailPrice: Int
  expiredAt: Posix!
}


type GradedStatuses {
  key: CollectibleGradeId!
  value: CollectibleStatus!
}

type Prices {
  price: PricingAuthorityId!
  value: PriceInfo!
}

type Population {
  key: GradingAuthorityId!
  value: Int!
}

type LatestExternalAprs {
  key: GradingAuthorityId!
  value: [AuctionPriceRealized!]!
}

type CollectibleToCollectibleKind {
  id: CollectibleToCollectibleKindId!
  name: String!
  description: String!
  collectibleALabel: String!
  collectibleBLabel: String!
  collectibleADefaultNote: String!
  collectibleBDefaultNote: String!
  definitions: [CustomPropertyDefinition!]!
  status: CollectibleToCollectibleKindStatus!
}

enum CollectibleToCollectibleKindStatus { Live Archived }

scalar CollectibleToCollectibleKindId

type CollectibleToGradingAuthority {
  collectible: CollectibleId!
  gradingAuthority: GradingAuthorityId!
}

type CollectibleToGradingScale {
  collectible: CollectibleId!
  gradingScale: GradingScaleId!
}

type CollectibleNodeRelationship {
  collectible: CollectibleId!
  node: CatalogHierarchyNodeId!
  isCanonical: Boolean!
  collectibleSortWeight: Float!
}

type CollectibleToPricingAuthority {
  collectible: CollectibleId!
  pricingAuthority: PricingAuthorityId!
  isPreferred: Boolean! # we'll show the "true" one in the node details table https://www.figma.com/file/bZ5zbay4rY4nDIKC6btygz/CDN-Exchange---Desktop?node-id=935%3A70720
}

type CollectibleToRarityRatingScale {
  collectible: CollectibleId!
  rarityRatingScale: RarityRatingScaleId!
}

type CollectibleToSellingAuthority {
  collectible: CollectibleId!
  sellingAuthority: SellingAuthorityId!
}

type Company {
  id: CompanyId!
  cdnxId: DealerCdnxId!
  name: String!
  logo: Image
  votesCount: Int!
  ratingToTen: Int
  sellingUnits: Int!
  soldUnits: Int!
  totalBidsAmount: Int!
  address1: String!
  address2: String!
  country: String!
  city: String!
  state: String!
  zip: String!
  businessPhone: String!
  homePhone: String!
  mobilePhone: String!
}

scalar CompanyId

scalar DealerCdnxId

union CustomProperty =
  CustomPropertyText
  | CustomPropertyTextMultiline
  | CustomPropertyTextUrl
  | CustomPropertyNumber
  | CustomPropertyImageOption
  | CustomPropertyPdf
  | CustomPropertyFile
  | CustomPropertyLink

union CustomPropertyDefinition =
  CustomPropertyDefinitionText
  | CustomPropertyDefinitionTextMultiline
  | CustomPropertyDefinitionTextUrl
  | CustomPropertyDefinitionNumber
  | CustomPropertyDefinitionImageOption
  | CustomPropertyDefinitionPdf
  | CustomPropertyDefinitionFile
  | CustomPropertyDefinitionLink

input CustomPropertyInput {
  text: CustomPropertyTextInput
  textMultiline: CustomPropertyTextMultilineInput
  textUrl: CustomPropertyTextUrlInput
  number: CustomPropertyNumberInput
  imageOption: CustomPropertyImageOptionInput
  pdf: CustomPropertyPdfInput
  file: CustomPropertyFileInput
  link: CustomPropertyLinkInput
}

input CustomPropertyDefinitionInput {
  text: CustomPropertyDefinitionTextInput
  textMultiline: CustomPropertyDefinitionTextMultilineInput
  textUrl: CustomPropertyDefinitionTextUrlInput
  number: CustomPropertyDefinitionNumberInput
  imageOption: CustomPropertyDefinitionImageOptionInput
  pdf: CustomPropertyDefinitionPdfInput
  file: CustomPropertyDefinitionFileInput
  link: CustomPropertyDefinitionLinkInput
}

union CustomPropertyImage =
  CustomPropertyText
  | CustomPropertyTextMultiline
  | CustomPropertyTextUrl
  | CustomPropertyNumber
  | CustomPropertyLink
  | CustomPropertyConfig

input CustomPropertyConfigInput {
  visibility: Visibility!
  isCloneable: Boolean!
  needsToBeProvidedByChildren: Boolean! # children fill up the same custom property
}

input CustomPropertyTextInput {
  value: String!
  label: String!
  config: CustomPropertyConfigInput}

input CustomPropertyTextMultilineInput {
  value: String!
  label: String!
  config: CustomPropertyConfigInput!
}

input CustomPropertyTextUrlInput {
  urlLabel: String!
  url: String!
  label: String!
  config: CustomPropertyConfigInput!
}

input CustomPropertyNumberInput {
  value: Float!
  label: String!
  config: CustomPropertyConfigInput!
}

input CustomPropertyLinkInput {
  src: String!
  label: String!
  config: CustomPropertyConfigInput!
}

type CustomPropertyImageOption implements CustomPropertyCommon {
  image: Image!
  label: String!
  config: CustomPropertyConfig!
}

input CustomPropertyImageOptionInput {
  image: ImageId!
  label: String!
  config: CustomPropertyConfigInput!
}

type CustomPropertyPdf implements CustomPropertyCommon {
  image: Image!
  src: String!
  label: String!
  config: CustomPropertyConfig!
}

input CustomPropertyPdfInput {
  image: ImageId!
  src: String!
  label: String!
  config: CustomPropertyConfigInput!
}

type CustomPropertyFile implements CustomPropertyCommon {
  image: Image!
  src: String!
  label: String!
  config: CustomPropertyConfig!
}

input CustomPropertyFileInput {
  image: ImageId!
  src: String!
  label: String!
  config: CustomPropertyConfigInput!
}

enum ProvidedBy { Nodes Collectibles All None }

interface CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionText implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionTextMultiline implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionTextUrl implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionNumber implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionImageOption implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionPdf implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionFile implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyDefinitionLink implements CustomPropertyDefinitionCommon {
  label: String!
  providedBy: ProvidedBy!
}


# input
input CustomPropertyDefinitionTextInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionTextMultilineInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionTextUrlInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionNumberInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionImageOptionInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionPdfInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionFileInput {
  label: String!
  providedBy: ProvidedBy!
}

input CustomPropertyDefinitionLinkInput {
  label: String!
  providedBy: ProvidedBy!
}

type CustomPropertyText implements CustomPropertyCommon {
  value: String!
  label: String!
  config: CustomPropertyConfig!
}

type CustomPropertyTextMultiline implements CustomPropertyCommon {
  value: String!
  label: String!
  config: CustomPropertyConfig!
}

type CustomPropertyTextUrl implements CustomPropertyCommon {
  urlLabel: String!
  url: String!
  label: String!
  config: CustomPropertyConfig!
}

type CustomPropertyNumber implements CustomPropertyCommon {
  value: Float!
  label: String!
  config: CustomPropertyConfig!
}

type CustomPropertyLink implements CustomPropertyCommon {
  src: String!
  label: String!
  config: CustomPropertyConfig!
}

type CustomPropertyConfig {
  visibility: Visibility!
  isCloneable: Boolean!
  needsToBeProvidedByChildren: Boolean! # children fill up the same custom property
}

interface CustomPropertyCommon {
  label: String!
  config: CustomPropertyConfig!
}

enum Visibility { Internal Public }

interface Dealer {
  company: Company
  representative: User
  relationship: UserCompany
}


type DealerTransactionsHistorySnapshot {
  lastMonth: TransactionsSnapshot
  lastSixMonths: TransactionsSnapshot
  lastTwelveMonths: TransactionsSnapshot
}

type TransactionsSnapshot {
  bids: Int
  offers: Int
  purchases: Int
  sales: Int
}

scalar Posix

scalar ResultPagePointer

scalar Id

scalar Permalink

scalar Void

scalar IdToken

scalar AccessToken

scalar RefreshToken

type ImageVariant {
  url: String!
  width: Float!
  height: Float!
}

enum DayInWeek { Mon Tue Wed Thu Fri Sat Sun }

enum SightCode {
  SightSeen
  SightUnseen
}

type SimpleDate {
  year: Int!
  month: Month!
  day: Int!
}

enum Month {Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec}

union GlobalRole = CdnxSubscriber | Admin | CatalogContributor | CatalogManager

type CdnxSubscriber { empty: Boolean }

type Admin { empty: Boolean }

type CatalogContributor { nodes: [CatalogHierarchyNodeId!]! }

type CatalogManager { empty: Boolean }

interface GradingAuthority {
  id: GradingAuthorityId!
  name: String!
  shortName: String!
  shortestName: String!
  status: GradingAuthorityStatus!
}

enum GradingAuthorityStatus { Live Archived }

type GradeKVP {
  key: GradingAuthorityId!
  value: CollectibleGradeId!
}

interface GradingScale {
  id: GradingScaleId!
  name: String!
  description: String!
  status: GradingScaleStatus
}

enum GradingScaleStatus { Live Archived }

scalar GradingScaleId

interface GradingScaleToCollectible {
  gradingScale: GradingScaleId!
  collectible: CollectibleId!
}

type GradingScaleToGradingAuthority {
  gradingScale: GradingScaleId!
  gradingAuthority: GradingAuthorityId!
}

type GradingScaleToNode {
  gradingScale: GradingScaleId!
  node: CatalogHierarchyNodeId!
}

type Image {
  id: ImageId!
  caption: String!
  aspectRatio: Float!
  source: SourceKind! # https://imageresizing.net/docs/v4/docs/basics
  url: String!
  processingStatus: ProcessingStatus!
  status: ImageStatus!
  #customProperties: [CustomPropertyImage!]!
}

enum ImageStatus { Live Archived }

enum ProcessingStatus { Processed Processing Pending }

union SourceKind = SellingAuthorityOption | ManualUploadOption

input SourceKindInput {
  sellingAuthorityId: SellingAuthorityId
  manualUploadOption: Boolean
}

type SellingAuthorityOption { id: SellingAuthorityId! }

type ManualUploadOption { empty: Boolean }

scalar ImageId

type PagedImage {
  items: [Image!]!
  lastEvaluatedItem: ResultPagePointer
}


input CreateNodeInput {
  # depending on how is created
  parentId: CatalogHierarchyNodeId

  # details
  name: String!
  description: String!
  permalink: String!
  images: [ImageId!]!
  status: NodeStatus!

  # grading scales and authorities
  gradingScales: [GradingScaleId!]!
  sellingAuthorities: [SellingAuthorityId!]!
  pricingAuthorities: [GradingScaleId!]!
  gradingAuthorities: [GradingAuthorityId!]!

  # collectibles
  collectibles: [CollectibleId!]!

  # custom properties
  customProperties: [CustomPropertyInput!]!
  customPropertyDefinitions: [CustomPropertyDefinitionInput!]!
}

input CreateCollectibleInput { notDefinedYet: Boolean }
input CreateCollectibleToCollectibleKindInput { notDefinedYet: Boolean }

type GradingAuthoritiesWithRelationships {
  gradingAuthorities: [GradingAuthority!]!
  nodesToGradingAuthorities: [NodeToGradingAuthority!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToGradingAuthorities: [CollectibleToGradingAuthority!]!
  collectibles: [Collectible!]!
  gradingScalesToGradingAuthorities: [GradingScaleToGradingAuthority!]!
  gradingScales: [GradingScale!]!
}

input CreateGradingAuthorityInput { notDefinedYet: Boolean }

type PricingAuthoritiesWithRelationships {
  pricingAuthorities: [PricingAuthority!]!
  nodesToPricingAuthorities: [NodeToPricingAuthority!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToPricingAuthorities: [CollectibleToPricingAuthority!]!
  collectibles: [Collectible!]!
}

input CreatePricingAuthorityInput { notDefinedYet: Boolean }

interface SellingAuthoritiesWithRelationships {
  sellingAuthorities: [SellingAuthority!]!
  nodesToSellingAuthorities: [NodeToSellingAuthority!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToSellingAuthorities: [CollectibleToSellingAuthority!]!
  collectibles: [Collectible!]!
}

input CreateSellingAuthorityInput { notDefinedYet: Boolean }

input CreateGradeInput { notDefinedYet: Boolean }

type GradingScalesAndRelationships {
  gradingScales: [GradingScale!]!
  nodesToGradingScales: [NodeToGradingScale!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToGradingScales: [CollectibleToGradingScale!]!
  collectibles: [Collectible!]!
}

type GradingScaleAndRelationships {
  gradingScale: GradingScale!
  nodesToGradingScales: [NodeToGradingScale!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToGradingScales: [CollectibleToGradingScale!]!
  collectibles: [Collectible!]!
  grades: [CollectibleGrade!]!
}

input CreateGradingScaleInput { notDefinedYet: Boolean }

input ImagesFilters {
  caption: String
  status: ImageStatus
  source: SourceKindInput
  customProperties: [CustomPropertyImageFiltersInput!]
}

input CustomPropertyImageFiltersInput {
  label: String
  value: String
}

type ImageAndRelationships { image: Image }

input CreateImageInput { notDefinedYet: Boolean }

input CreateRarityRatingInput { notDefinedYet: Boolean }

type RarityRatingScalesAndRelationships {
  rarityRatingScales: [RarityRatingScale!]!
  nodesToRarityRatingScales: [NodeToRarityRatingScale!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToRarityRatingScales: [CollectibleToRarityRatingScale!]!
  collectibles: [Collectible!]!
}

type RarityRatingScaleAndRelationships {
  rarityRatingScale: RarityRatingScale!
  nodesToRarityRatingScales: [NodeToRarityRatingScale!]!
  nodes: [CatalogHierarchyNode!]!
  collectiblesToRarityRatingScales: [CollectibleToRarityRatingScale!]!
  collectibles: [Collectible!]!
  rarityRatings: [RarityRating!]!
}

input CreateRarityRatingScaleInput { notDefinedYet: Boolean }

type NodeStatusForAllGrades {
  collectiblesStatuses: [CollectibleAndStatusForAllGrades!]!
}

type CollectibleShortStatusForAllGrades {
  ungraded: CollectibleStatusShort
  gradedStatuses: [GradedStatusesNode!]!
}

type CollectibleAndStatusForAllGrades {
  key: CollectibleId!
  value: CollectibleShortStatusForAllGrades!
}

type GradedStatusesNode {
  key: CollectibleGradeId!
  value: CollectibleStatusShort!
}


type NodeToGradingScale {
  node: CatalogHierarchyNodeId!
  gradingScale: GradingScaleId!
}

type NodeToPricingAuthority {
  node: CatalogHierarchyNodeId!
  pricingAuthority: PricingAuthorityId!
  isPreferred: Boolean! # we'll show the "true" one in the node details table https://www.figma.com/file/bZ5zbay4rY4nDIKC6btygz/CDN-Exchange---Desktop?node-id=935%3A70720
}


type NodeToRarityRatingScale {
  node: CatalogHierarchyNodeId!
  rarityRatingScale: RarityRatingScaleId!
}


type NodeToSellingAuthority {
  node: CatalogHierarchyNodeId!
  sellingAuthority: SellingAuthorityId!
}

type OfferForCollectible {
  id: OfferForCollectibleId!
  offerBy: CompanyId!
  offerByCdnxId: DealerCdnxId!
  collectibleId: CollectibleId!
  grades: [CollectibleGradeId!]!
  gradedByAnyOf: [GradingAuthority!]!
  createdAt: Posix!
  modifiedAt: Posix
  lifetimeMillis: Int! #createdAt + lifetimeMillis = expiration date
  offerAmount: Int!
  unitsCount: Int!
  sight: SightCode
}

scalar OfferForCollectibleId


type PricingAuthority {
  id: PricingAuthorityId!
  name: String!
  status: PricingAuthorityStatus!
}

enum PricingAuthorityStatus { Live Archived }

scalar PricingAuthorityId


type RarityRating {
  id: RarityRatingId!
  name: String!
  weight: Float!
  description: String!
  status: RarityRatingStatus
}

enum RarityRatingStatus { Live Archived }

scalar RarityRatingId

type RarityRatingScale {
  id: RarityRatingScaleId!
  name: String!
  description: String!
  status: RarityRatingScaleStatus!
}

enum RarityRatingScaleStatus { Live Archived }

scalar RarityRatingScaleId

type Self {
  user: User
  settings: Settings
  clientSettings: ClientSettings # This information is only relevant to the app clients, thus, the backend type for this is going to be a freeform JSON structure.
  company: Company
  userCompany: UserCompany
  globalRole: [GlobalRole!]!
  myOffers: [OfferForCollectible!]!
  myBids: [BidForCollectible!]
}

type SellingAuthority {
  id: SellingAuthorityId!
  name: String!
  shortName: String!
  status: SellingAuthorityStatus
}

enum SellingAuthorityStatus { Live, Archived }

scalar SellingAuthorityId


type Settings {
  interestedInNodes: [InterestedInNodes!]!
  getNotifiedForPostsWithKeywords: [String!]!
  blockPublicEmailsFromDealers: [CompanyId!]!
  dailySalesLimitCents: Int
  bidReport: NotificationConfigBidReport
  tradeExecuted: NotificationConfigBasic
  chatMessage: NotificationConfigBasic
  gotOutbid: NotificationConfigBasic
  lowerAsk: NotificationConfigBasic
  newComment: NotificationConfigNewComment
  newPublicPost: NotificationConfigBasic

}

type ClientSettings {
  defaultBidExpirationMillis: Int
  maxDataRowsCount: Int
}

type InterestedInNodes {
  node: CatalogHierarchyNodeId!
  minimumGrade: CollectibleGradeId
}

interface NotificationConfigBasic {
  push: Boolean!
  email: Boolean!
}

type NotificationConfigBidReport implements NotificationConfigBasic {
  push: Boolean!
  email: Boolean!
  options: BidReportOptions
}

type BidReportOptions {
  frequency: BidReportFrequency
}

enum BidReportFrequency { Daily Weekly }

type NotificationConfigNewComment implements NotificationConfigBasic {
  push: Boolean!
  email: Boolean!
  options: NewCommentOptions!
}

type NewCommentOptions {
  frequency: NewCommentFrequency!
  includeLiked: Boolean!
  includeFromMyComments: Boolean!
}

enum NewCommentFrequency { Realtime Daily Weekly }

scalar TradeId

type Trade {
  id: TradeId!
  createdAt: Posix!
  modifiedAt: Posix
  collectible: CollectibleId!
  quantity: Int!
  amount: Int!
  images: [Image!]!
  gradedBy: [GradeKVP!]!
}

type User {
  id: UserId!
  firstName: String!
  lastName: String!
  email: String!
}

scalar UserId


type UserCompany {
  user: UserId!
  company: CompanyId!
  role: Role!
}

enum Role { Owner Viewer }


scalar CollectibleId

scalar GradingAuthorityId






type NodeToGradingAuthority {
  node: CatalogHierarchyNodeId!
  gradingAuthority: GradingAuthorityId!
}



